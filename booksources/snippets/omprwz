// wrongreduct.c
int reduce_without_zero(int r,int n) {
  // r is the already reduced value, n is the new value
  int m;
  if (r<0){ // initializer
    if (n!=0)
      m = n;
    else
      m = r;
  } else if (n<0) { // initializer
    if (r!=0)
      m = r;
    else
      m = n;
  } else if (n==0) { // new value is zero: keep r
    m = r;
  } else if (n<r) { // new value is less but not zero: use n
    m = n;
  } else { // new value is more: use r
    m = r;
  };
  return m;
}
#pragma omp declare reduction \
  (rwz:int:omp_out=reduce_without_zero(omp_out,omp_in)) \
  initializer(omp_priv=-1)
  m = -1;
#pragma omp parallel for reduction(rwz:m)
  for (int idata=0; idata<ndata; idata++)
    m = reduce_without_zero(m,data[idata]);
