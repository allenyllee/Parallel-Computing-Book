// commdup.c
  ierr = MPI_Isend(&sdata,1,MPI_INT,right,1,comm,&(request[0])); CHK(ierr);
  function_start(comm,request+2);
  //    function_start(comm,&ctx);
  ierr = MPI_Irecv(&rdata,1,MPI_INT,left,MPI_ANY_TAG,comm,&(request[1])); CHK(ierr);
  ierr = MPI_Waitall(2,request,status); CHK(ierr);
  //    function_end(comm,ctx);
  function_end(comm,request+2);
//int function_start(MPI_Comm comm,void **ctx) {
int function_start(MPI_Comm comm,MPI_Request *request) {
int mytid,ntids,left,right, sdata=6,rdata, ierr;
//MPI_Request *request;
MPI_Comm_rank(comm,&mytid);
MPI_Comm_size(comm,&ntids);

left = mytid-1; if (left<0) left = MPI_PROC_NULL;
right = mytid+1; if (right>=ntids) right = MPI_PROC_NULL;

//  request = (MPI_Request*) malloc(2*sizeof(MPI_Request)); *ctx = (void*)request;

ierr = MPI_Isend(&sdata,1,MPI_INT,right,2,comm,&(request[0])); CHK(ierr);
ierr = MPI_Irecv(&rdata,1,MPI_INT,left,MPI_ANY_TAG,comm,&(request[1])); CHK(ierr);
return 0;
}

//int function_end(MPI_Comm comm,void *ctx) {
int function_end(MPI_Comm comm,MPI_Request *request) {
//  MPI_Request *request = (MPI_Request*)ctx;
MPI_Status status[2];
int mytid,ntids,ierr;
MPI_Comm_rank(comm,&mytid);
MPI_Comm_size(comm,&ntids);
ierr = MPI_Waitall(2,request,status); CHK(ierr);
//free(request);
return 0;
}
